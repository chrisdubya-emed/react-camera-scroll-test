import _extends from '@babel/runtime/helpers/esm/extends';
import * as THREE from 'three';
import * as React from 'react';
import * as ReactDOM from 'react-dom';
import { useThree, useFrame, context as context$1 } from '@react-three/fiber';
import mergeRefs from 'react-merge-refs';

const context = /*#__PURE__*/React.createContext(null);
function useScroll() {
  return React.useContext(context);
}
function ScrollControls({
  eps = 0.00001,
  infinite,
  horizontal,
  pages = 1,
  distance = 1,
  damping = 4,
  children
}) {
  const gl = useThree(state => state.gl);
  const invalidate = useThree(state => state.invalidate);
  const events = useThree(state => state.events);
  const raycaster = useThree(state => state.raycaster);
  const [el] = React.useState(() => document.createElement('div'));
  const [fill] = React.useState(() => document.createElement('div'));
  const [fixed] = React.useState(() => document.createElement('div'));
  const target = gl.domElement.parentNode;
  const scroll = React.useRef(0);
  const state = React.useMemo(() => {
    const state = {
      el,
      eps,
      fill,
      fixed,
      horizontal,
      damping,
      offset: 0,
      delta: 0,
      scroll,
      pages,

      // 0 - 1 for a range between start -> start + range
      range(start, range) {
        const end = start + range;
        return this.offset < start ? 0 : this.offset > end ? 1 : (this.offset - start) / (end - start);
      },

      // true/false for a range between start -> start + range
      visible(start, range) {
        const end = start + range;
        return this.offset >= start && this.offset <= end;
      }

    };
    return state;
  }, [eps, damping, horizontal, pages]);
  React.useEffect(() => {
    el.style.position = 'absolute';
    el.style.width = '100%';
    el.style.height = '100%';
    el.style[horizontal ? 'overflowX' : 'overflowY'] = 'auto';
    el.style.top = '0px';
    el.style.left = '0px';
    fixed.style.position = 'sticky';
    fixed.style.top = '0px';
    fixed.style.left = '0px';
    el.appendChild(fixed);
    fill.style.height = horizontal ? '100%' : `${pages * distance * 100}%`;
    fill.style.width = horizontal ? `${pages * distance * 100}%` : '100%';
    fill.style.pointerEvents = 'none';
    el.appendChild(fill);

    const onScroll = e => {
      invalidate();
      scroll.current = horizontal ? e.target.scrollLeft / (e.target.scrollWidth - e.target.clientWidth) : e.target.scrollTop / (e.target.scrollHeight - e.target.clientHeight);

      if (infinite) {
        if (scroll.current === 1) {
          const damp = 1 - state.offset;
          e.target[horizontal ? 'scrollLeft' : 'scrollTop'] = 0;
          scroll.current = state.offset = -damp;
        } else if (scroll.current === 0) {
          const damp = 1 + state.offset;
          e.target[horizontal ? 'scrollLeft' : 'scrollTop'] = e.target[horizontal ? 'scrollWidth' : 'scrollHeight'];
          scroll.current = state.offset = damp;
        }
      }
    };

    el.addEventListener('scroll', onScroll, {
      passive: true
    });
    target.appendChild(el);
    requestAnimationFrame(() => events.connect == null ? void 0 : events.connect(el));

    raycaster.computeOffsets = ({
      clientX,
      clientY
    }) => ({
      offsetX: clientX,
      offsetY: clientY
    });

    return () => {
      target.removeChild(el);
      el.removeEventListener('scroll', onScroll);
    };
  }, [infinite, state, invalidate, distance, damping, pages, horizontal]);
  let last = 0;
  useFrame((_, delta) => {
    state.offset = THREE.MathUtils.damp(last = state.offset, scroll.current, damping, delta);
    state.delta = THREE.MathUtils.damp(state.delta, Math.abs(last - state.offset), damping, delta);
    if (state.delta > eps) invalidate();
  });
  return /*#__PURE__*/React.createElement(context.Provider, {
    value: state
  }, children);
}
const Scroll = /*#__PURE__*/React.forwardRef(({
  html,
  ...props
}, ref) => {
  const El = html ? ScrollHtml : ScrollCanvas;
  return /*#__PURE__*/React.createElement(El, _extends({
    ref: ref
  }, props));
});
const ScrollCanvas = /*#__PURE__*/React.forwardRef(({
  children
}, ref) => {
  const group = React.useRef(null);
  const state = useScroll();
  const {
    width,
    height
  } = useThree(state => state.viewport);
  useFrame(() => {
    group.current.position.x = state.horizontal ? -width * (state.pages - 1) * state.offset : 0;
    group.current.position.y = state.horizontal ? 0 : height * (state.pages - 1) * state.offset;
  });
  return /*#__PURE__*/React.createElement("group", {
    ref: mergeRefs([ref, group])
  }, children);
});
const ScrollHtml = /*#__PURE__*/React.forwardRef(({
  children,
  style,
  ...props
}, ref) => {
  const state = useScroll();
  const group = React.useRef(null);
  const {
    width,
    height
  } = useThree(state => state.size);
  const fiberState = React.useContext(context$1);
  useFrame(() => {
    if (state.delta > state.eps) {
      group.current.style.transform = `translate3d(${state.horizontal ? -width * (state.pages - 1) * state.offset : 0}px,${state.horizontal ? 0 : height * (state.pages - 1) * -state.offset}px,0)`;
    }
  });
  ReactDOM.render( /*#__PURE__*/React.createElement("div", _extends({
    ref: mergeRefs([ref, group]),
    style: { ...style,
      position: 'absolute',
      top: 0,
      left: 0,
      willChange: 'transform'
    }
  }, props), /*#__PURE__*/React.createElement(context.Provider, {
    value: state
  }, /*#__PURE__*/React.createElement(context$1.Provider, {
    value: fiberState
  }, children))), state.fixed);
  return null;
});

export { Scroll, ScrollControls, useScroll };
